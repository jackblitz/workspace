#!/bin/bash

# Polaris Documentation Access Tool
# Usage: polaris-docs [category|@alias|search term]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCS_DIR="$SCRIPT_DIR/app/polaris/docs"
INDEX_FILE="$SCRIPT_DIR/.polaris-docs/index.json"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to display help
show_help() {
    echo -e "${GREEN}Polaris Documentation Access Tool${NC}"
    echo ""
    echo "Usage: polaris-docs [option]"
    echo ""
    echo "Options:"
    echo "  list                    List all documentation categories"
    echo "  aliases                 Show all @documentation aliases"
    echo "  <category>             Show docs in a category (overview, guidelines, examples, research, specifications)"
    echo "  @<alias>               Access docs by alias (e.g., @ecs, @rendering, @scene)"
    echo "  search <term>          Search for documentation containing term"
    echo "  view <filename>        View a specific documentation file"
    echo "  help                   Show this help message"
    echo ""
    echo "Examples:"
    echo "  polaris-docs list"
    echo "  polaris-docs @ecs"
    echo "  polaris-docs guidelines"
    echo "  polaris-docs search \"memory efficient\""
    echo "  polaris-docs view \"Project Overview.md\""
}

# Function to list categories
list_categories() {
    echo -e "${GREEN}Documentation Categories:${NC}"
    echo ""
    jq -r '.categories | to_entries[] | "  \(.key): \(.value.description)"' "$INDEX_FILE"
}

# Function to list aliases
list_aliases() {
    echo -e "${GREEN}Documentation Aliases:${NC}"
    echo ""
    jq -r '.aliases | to_entries[] | "  \(.key): \(.value | length) document(s)"' "$INDEX_FILE"
}

# Function to show category files
show_category() {
    local category=$1
    local description=$(jq -r ".categories.$category.description" "$INDEX_FILE" 2>/dev/null)
    
    if [ "$description" = "null" ]; then
        echo -e "${YELLOW}Category '$category' not found${NC}"
        return 1
    fi
    
    echo -e "${GREEN}$category: $description${NC}"
    echo ""
    jq -r ".categories.$category.files[]" "$INDEX_FILE" | while read -r file; do
        echo "  • $file"
    done
}

# Function to show alias files
show_alias() {
    local alias=$1
    local files=$(jq -r ".aliases.\"$alias\"[]?" "$INDEX_FILE" 2>/dev/null)
    
    if [ -z "$files" ]; then
        echo -e "${YELLOW}Alias '$alias' not found${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Documentation for $alias:${NC}"
    echo ""
    echo "$files" | while read -r file; do
        echo "  • $file"
        if [ -f "$DOCS_DIR/$file" ]; then
            echo -e "    ${BLUE}Path: $DOCS_DIR/$file${NC}"
        fi
    done
}

# Function to search documentation
search_docs() {
    local term=$1
    echo -e "${GREEN}Searching for '$term' in documentation...${NC}"
    echo ""
    
    find "$DOCS_DIR" -name "*.md" -type f | while read -r file; do
        if grep -qi "$term" "$file"; then
            local relpath="${file#$DOCS_DIR/}"
            echo -e "${BLUE}Found in: $relpath${NC}"
            grep -i -n -C 1 "$term" "$file" | head -10
            echo ""
        fi
    done
}

# Function to view a specific file
view_file() {
    local filename=$1
    local filepath
    
    # Try to find the file
    if [ -f "$DOCS_DIR/$filename" ]; then
        filepath="$DOCS_DIR/$filename"
    else
        filepath=$(find "$DOCS_DIR" -name "$filename" -type f | head -1)
    fi
    
    if [ -z "$filepath" ] || [ ! -f "$filepath" ]; then
        echo -e "${YELLOW}File '$filename' not found${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Viewing: ${filepath#$DOCS_DIR/}${NC}"
    echo ""
    cat "$filepath"
}

# Main command processing
case "$1" in
    ""|"help"|"-h"|"--help")
        show_help
        ;;
    "list")
        list_categories
        ;;
    "aliases")
        list_aliases
        ;;
    "search")
        if [ -z "$2" ]; then
            echo -e "${YELLOW}Please provide a search term${NC}"
            exit 1
        fi
        search_docs "$2"
        ;;
    "view")
        if [ -z "$2" ]; then
            echo -e "${YELLOW}Please provide a filename${NC}"
            exit 1
        fi
        view_file "$2"
        ;;
    @*)
        show_alias "$1"
        ;;
    *)
        show_category "$1"
        ;;
esac